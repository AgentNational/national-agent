<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.pay.national.agent.core.dao.common.AccountMapper" >
  <resultMap id="BaseResultMap" type="com.pay.national.agent.model.entity.Account" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="optimistic" property="optimistic" jdbcType="INTEGER" />
    <result column="account_no" property="accountNo" jdbcType="VARCHAR" />
    <result column="balance" property="balance" jdbcType="DOUBLE" />
    <result column="trans_amount" property="transAmount" jdbcType="DOUBLE" />
    <result column="frozen_amount" property="frozenAmount" jdbcType="DOUBLE" />
    <result column="user_no" property="userNo" jdbcType="VARCHAR" />
    <result column="status" property="status" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="last_update_time" property="lastUpdateTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, optimistic, account_no, balance, trans_amount, frozen_amount, user_no, status,
    create_time, last_update_time
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select
    <include refid="Base_Column_List" />
    from account
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from account
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.pay.national.agent.model.entity.Account" >
    <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into account (optimistic, account_no, balance, 
      trans_amount, frozen_amount, user_no, 
      status, create_time, last_update_time
      )
    values (0, #{accountNo,jdbcType=VARCHAR}, #{balance,jdbcType=DOUBLE},
      #{transAmount,jdbcType=DOUBLE}, #{frozenAmount,jdbcType=DOUBLE}, #{userNo,jdbcType=VARCHAR}, 
      #{status,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{lastUpdateTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.pay.national.agent.model.entity.Account" >
    <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into account
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="optimistic != null" >
        optimistic,
      </if>
      <if test="accountNo != null" >
        account_no,
      </if>
      <if test="balance != null" >
        balance,
      </if>
      <if test="transAmount != null" >
        trans_amount,
      </if>
      <if test="frozenAmount != null" >
        frozen_amount,
      </if>
      <if test="userNo != null" >
        user_no,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="lastUpdateTime != null" >
        last_update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="optimistic != null" >
        0,
      </if>
      <if test="accountNo != null" >
        #{accountNo,jdbcType=VARCHAR},
      </if>
      <if test="balance != null" >
        #{balance,jdbcType=DOUBLE},
      </if>
      <if test="transAmount != null" >
        #{transAmount,jdbcType=DOUBLE},
      </if>
      <if test="frozenAmount != null" >
        #{frozenAmount,jdbcType=DOUBLE},
      </if>
      <if test="userNo != null" >
        #{userNo,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        #{status,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="lastUpdateTime != null" >
        #{lastUpdateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.pay.national.agent.model.entity.Account" >
    update account
    <set >
      <if test="optimistic != null" >
        optimistic = optimistic + 1,
      </if>
      <if test="accountNo != null" >
        account_no = #{accountNo,jdbcType=VARCHAR},
      </if>
      <if test="balance != null" >
        balance = #{balance,jdbcType=DOUBLE},
      </if>
      <if test="transAmount != null" >
        trans_amount = #{transAmount,jdbcType=DOUBLE},
      </if>
      <if test="frozenAmount != null" >
        frozen_amount = #{frozenAmount,jdbcType=DOUBLE},
      </if>
      <if test="userNo != null" >
        user_no = #{userNo,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="lastUpdateTime != null" >
        last_update_time = #{lastUpdateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.pay.national.agent.model.entity.Account" >
    update account
    set optimistic = optimistic + 1,
      account_no = #{accountNo,jdbcType=VARCHAR},
      balance = #{balance,jdbcType=DOUBLE},
      trans_amount = #{transAmount,jdbcType=DOUBLE},
      frozen_amount = #{frozenAmount,jdbcType=DOUBLE},
      user_no = #{userNo,jdbcType=VARCHAR},
      status = #{status,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      last_update_time = #{lastUpdateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>

  <select id="findByuser" resultMap="BaseResultMap">
    SELECT <include refid="Base_Column_List"/>
    FROM account
    WHERE user_no = #{userNo,jdbcType=VARCHAR}
  </select>

  <select id="find" resultMap="BaseResultMap">
    SELECT <include refid="Base_Column_List"/>
    FROM  account
    WHERE account_no = #{accountNo,jdbcType=VARCHAR}
  </select>

  <!-- 操作账户金额的方法，谨慎使用 -->
  <update id="amountOnLock">
    UPDATE account
    SET balance = #{account.balance,jdbcType=DOUBLE},
        optimistic = optimistic +1,
        last_update_time = #{account.lastUpdateTime,jdbcType=TIMESTAMP}
    WHERE  id = #{account.id,jdbcType=BIGINT}
    AND  optimistic = #{account.optimistic,jdbcType=INTEGER}
  </update>
</mapper>